{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Samiiha28/Assignment-game/blob/master/Untitled2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KrdaBsRAttSm",
        "colab_type": "code",
        "outputId": "d6d2fbfc-6d15-4203-fd23-99f2b6239680",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 57
        }
      },
      "source": [
        "from google.colab import files\n",
        "files.upload()"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-e3945fab-efab-460c-b9ca-0462c194a22b\" name=\"files[]\" multiple disabled />\n",
              "     <output id=\"result-e3945fab-efab-460c-b9ca-0462c194a22b\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-qs4ZCZrub2N",
        "colab_type": "code",
        "outputId": "1a23373c-ab42-4861-972b-26ffd610a52d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        }
      },
      "source": [
        "!pip install kaggle\n"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.6/dist-packages (1.5.3)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.12.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.6/dist-packages (from kaggle) (2019.3.9)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.6/dist-packages (from kaggle) (3.0.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.21.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.5.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from kaggle) (4.28.1)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.24.3)\n",
            "Requirement already satisfied: text-unidecode==1.2 in /usr/local/lib/python3.6/dist-packages (from python-slugify->kaggle) (1.2)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->kaggle) (3.0.4)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->kaggle) (2.8)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SXXwi1lov0SC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "cf0fb4d0-7fb5-4e9e-be61-733b855ee3f1"
      },
      "source": [
        "!mkdir ~/.kaggle"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "mkdir: cannot create directory ‘/root/.kaggle’: File exists\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rfpsTpOaWntY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f170d55f-8358-4f06-ead2-7349e2b79fed"
      },
      "source": [
        "!mkdir kaggle"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "mkdir: cannot create directory ‘kaggle’: File exists\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k2gmfkiRWtNF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!cp kaggle.json kaggle/"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1i4kWUBQXZZl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!cp kaggle/kaggle.json ~/.kaggle/"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KgpRdgbwv6Mf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import json\n",
        "token = {\"username\":\"samiiha\",\"key\":\"e839f37e68e0bdfa1829e6f91340fa70\"}"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "93IBbgDIwAo9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "with open(\"/content/.kaggle/kaggle.json\",\"w\") as file:\n",
        "  json.dump(token,file)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wuyu7swXw0NJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!chmod 600 ~/.kaggle/kaggle.json"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6Masxaq3xmUl",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lNoCmlxTw4TZ",
        "colab_type": "code",
        "outputId": "e212df52-12b1-4887-ffbd-ce3acc846c59",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "!kaggle competitions download -c cassava-disease -p /content/"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "sample_submission_file.csv: Skipping, found more recently modified local copy (use --force to force download)\n",
            "test.zip: Skipping, found more recently modified local copy (use --force to force download)\n",
            "train.zip: Skipping, found more recently modified local copy (use --force to force download)\n",
            "extraimages.zip: Skipping, found more recently modified local copy (use --force to force download)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z7c3_aFVxZT5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!cp kaggle.json ~/.kaggle/kaggle.json"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kEbcWVn2x7Oe",
        "colab_type": "code",
        "outputId": "9643007d-113a-4650-e8a0-b037b84972b8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "!unzip train.zip"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Archive:  train.zip\n",
            "replace train/cgm/train-cgm-738.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: N\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mpcOJU_8yaaa",
        "colab_type": "code",
        "outputId": "96153d4b-13fa-47d3-b753-171e994c6ede",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        " !unzip test.zip\n",
        " !unzip extraimages.zip"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Archive:  test.zip\n",
            "replace test/0/test-img-2397.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: Archive:  extraimages.zip\n",
            "replace extraimages/extra-image-1587.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: "
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8wQBkxcRyjo7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iiHEcM5ry57w",
        "colab_type": "code",
        "outputId": "f80704af-2ab7-40cb-d8a0-e18a370d6c9c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1105
        }
      },
      "source": [
        "data = pd.read_csv('sample_submission_file.csv')\n",
        "data.head"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.head of      Category                 Id\n",
              "0        cbsd     test-img-0.jpg\n",
              "1         cmd     test-img-1.jpg\n",
              "2         cbb     test-img-2.jpg\n",
              "3         cmd     test-img-3.jpg\n",
              "4        cbsd     test-img-4.jpg\n",
              "5        cbsd     test-img-5.jpg\n",
              "6         cgm     test-img-6.jpg\n",
              "7        cbsd     test-img-7.jpg\n",
              "8         cmd     test-img-8.jpg\n",
              "9         cgm     test-img-9.jpg\n",
              "10        cmd    test-img-10.jpg\n",
              "11        cgm    test-img-11.jpg\n",
              "12        cgm    test-img-12.jpg\n",
              "13        cbb    test-img-13.jpg\n",
              "14        cgm    test-img-14.jpg\n",
              "15        cbb    test-img-15.jpg\n",
              "16        cgm    test-img-16.jpg\n",
              "17        cgm    test-img-17.jpg\n",
              "18        cbb    test-img-18.jpg\n",
              "19        cgm    test-img-19.jpg\n",
              "20        cmd    test-img-20.jpg\n",
              "21    healthy    test-img-21.jpg\n",
              "22    healthy    test-img-22.jpg\n",
              "23       cbsd    test-img-23.jpg\n",
              "24    healthy    test-img-24.jpg\n",
              "25        cgm    test-img-25.jpg\n",
              "26        cgm    test-img-26.jpg\n",
              "27       cbsd    test-img-27.jpg\n",
              "28        cgm    test-img-28.jpg\n",
              "29        cgm    test-img-29.jpg\n",
              "...       ...                ...\n",
              "3744  healthy  test-img-3744.jpg\n",
              "3745      cbb  test-img-3745.jpg\n",
              "3746      cbb  test-img-3746.jpg\n",
              "3747     cbsd  test-img-3747.jpg\n",
              "3748  healthy  test-img-3748.jpg\n",
              "3749      cmd  test-img-3749.jpg\n",
              "3750     cbsd  test-img-3750.jpg\n",
              "3751      cgm  test-img-3751.jpg\n",
              "3752      cmd  test-img-3752.jpg\n",
              "3753     cbsd  test-img-3753.jpg\n",
              "3754      cmd  test-img-3754.jpg\n",
              "3755     cbsd  test-img-3755.jpg\n",
              "3756     cbsd  test-img-3756.jpg\n",
              "3757     cbsd  test-img-3757.jpg\n",
              "3758  healthy  test-img-3758.jpg\n",
              "3759      cmd  test-img-3759.jpg\n",
              "3760     cbsd  test-img-3760.jpg\n",
              "3761      cmd  test-img-3761.jpg\n",
              "3762      cbb  test-img-3762.jpg\n",
              "3763  healthy  test-img-3763.jpg\n",
              "3764      cgm  test-img-3764.jpg\n",
              "3765      cmd  test-img-3765.jpg\n",
              "3766  healthy  test-img-3766.jpg\n",
              "3767      cmd  test-img-3767.jpg\n",
              "3768     cbsd  test-img-3768.jpg\n",
              "3769      cbb  test-img-3769.jpg\n",
              "3770      cgm  test-img-3770.jpg\n",
              "3771  healthy  test-img-3771.jpg\n",
              "3772      cbb  test-img-3772.jpg\n",
              "3773  healthy  test-img-3773.jpg\n",
              "\n",
              "[3774 rows x 2 columns]>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lb4bczsCzOm6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import keras\n",
        "from keras_preprocessing.image import ImageDataGenerator\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9Bolidga7maG",
        "colab_type": "code",
        "outputId": "67ce3e89-5058-4437-b939-73d1827cb37d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "datagen = ImageDataGenerator(validation_split=0.2,\n",
        "                             rescale=1./255 ,\n",
        "                             shear_range=0.2,\n",
        "                             zoom_range=0.2,\n",
        "                             horizontal_flip=True)\n",
        "TRAIN_DIR = 'train'\n",
        "\n",
        "train_generator = datagen.flow_from_directory(\n",
        "    TRAIN_DIR, \n",
        "    subset='training',\n",
        "        target_size=(200, 200),\n",
        "        batch_size=32,\n",
        "        class_mode='categorical'\n",
        ")\n",
        "\n",
        "validation_generator = datagen.flow_from_directory(\n",
        "    TRAIN_DIR,\n",
        "    subset='validation',\n",
        "        target_size=(200, 200),\n",
        "        batch_size=32,\n",
        "        class_mode='categorical'\n",
        ")"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 4527 images belonging to 5 classes.\n",
            "Found 1129 images belonging to 5 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YbZqziAXzInw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# train_datagen = ImageDataGenerator(\n",
        "#         rescale=1./255,\n",
        "#         shear_range=0.2,\n",
        "#         zoom_range=0.2,\n",
        "#         horizontal_flip=True)\n",
        "\n",
        "# test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "# train_generator = train_datagen.flow_from_directory(\n",
        "#         'train',\n",
        "#         target_size=(200, 200),\n",
        "#         batch_size=32,\n",
        "#         class_mode='categorical')\n",
        "\n",
        "# validation_generator = test_datagen.flow_from_directory(\n",
        "#         'ourtest',\n",
        "#         target_size=(200, 200),\n",
        "#         batch_size=32,\n",
        "#         class_mode='categorical')\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1ql5w50u7CA1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from numpy.random import seed\n",
        "seed(1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k35jEFGA19-c",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "from keras.models import Sequential, load_model\n",
        "from keras.layers import Conv2D, Dropout, Dense, Activation, MaxPooling2D,Flatten\n",
        "from keras.layers.normalization import BatchNormalization\n",
        "from keras.optimizers import rmsprop, SGD, Adam\n",
        "from keras.preprocessing import image\n",
        "from tensorflow.python.keras.applications import VGG16\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qSEqLW2x22oF",
        "colab_type": "code",
        "outputId": "a6c1f407-dc60-4656-c809-532d63c7aad4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "\n",
        "# model = VGG16(include_top=True, weights='imagenet')\n",
        "model = Sequential()\n",
        "# model.add(Conv2D(64, (3, 3), padding='same',\n",
        "#                  input_shape=(200,200,3)))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Conv2D(64, (3, 3)))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# model.add(Dropout(0.25))\n",
        "\n",
        "# model.add(Conv2D(128, (3, 3), padding='same'))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Conv2D(128, (3, 3)))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# model.add(Dropout(0.25))\n",
        "\n",
        "\n",
        "# model.add(Conv2D(256, (3, 3), padding='same'))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Conv2D(256, (3, 3)))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Conv2D(256, (3, 3)))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# model.add(Dropout(0.25))\n",
        "\n",
        "\n",
        "# model.add(Conv2D(512, (3, 3), padding='same'))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Conv2D(512, (3, 3)))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Conv2D(512, (3, 3)))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# model.add(Dropout(0.25))\n",
        "\n",
        "\n",
        "# model.add(Conv2D(512, (3, 3), padding='same'))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Conv2D(512, (3, 3)))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Conv2D(512, (3, 3)))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# model.add(Dropout(0.25))\n",
        "\n",
        "# model.add(Flatten())\n",
        "# model.add(Dense(4096))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Dense(4096))\n",
        "# model.add(Activation('relu'))\n",
        "# model.add(Dropout(0.5))\n",
        "# model.add(Dense(5, activation='softmax'))\n",
        "\n",
        "\n",
        "# define 1st conv layer\n",
        "model.add(Conv2D(96, kernel_size=(11, 11), strides=(4, 4), activation='relu', input_shape=(200, 200, 3)))\n",
        "#pooling\n",
        "model.add(MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n",
        "#normalization\n",
        "model.add(BatchNormalization())\n",
        "\n",
        "#2nd conv layer\n",
        "model.add(Conv2D(256, kernel_size=(5, 5), activation='relu'))\n",
        "model.add(MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n",
        "model.add(BatchNormalization())\n",
        "\n",
        "#3rd, 4th, 5th conv layers\n",
        "model.add(Conv2D(256, kernel_size=(3, 3), activation='relu'))\n",
        "model.add(Conv2D(384, kernel_size=(3, 3), activation='relu'))\n",
        "model.add(Conv2D(384, kernel_size=(3, 3), activation='relu'))\n",
        "model.add(MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n",
        "model.add(BatchNormalization())\n",
        "\n",
        "model.add(Flatten())\n",
        "model.add(Dense(4096, activation='relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(4096, activation='relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(5, activation='softmax'))\n",
        "\n",
        "sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n",
        "model.compile(loss='categorical_crossentropy', optimizer= 'Adam', metrics=[\"accuracy\"])\n",
        "              \n",
        "STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n",
        "STEP_SIZE_VALID=validation_generator.n//validation_generator.batch_size\n",
        "\n",
        "history = model.fit_generator(generator=train_generator,\n",
        "                    steps_per_epoch=STEP_SIZE_TRAIN,\n",
        "                    validation_data=validation_generator,\n",
        "                    validation_steps=STEP_SIZE_VALID,\n",
        "                    epochs=12)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/12\n",
            "135/176 [======================>.......] - ETA: 24s - loss: 1.5776 - acc: 0.4819"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GJmRpdHro47L",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1598
        },
        "outputId": "c5964d9f-5a9f-47e5-adce-8f93e8720db5"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_112 (Conv2D)          (None, 200, 200, 64)      1792      \n",
            "_________________________________________________________________\n",
            "activation_129 (Activation)  (None, 200, 200, 64)      0         \n",
            "_________________________________________________________________\n",
            "conv2d_113 (Conv2D)          (None, 198, 198, 64)      36928     \n",
            "_________________________________________________________________\n",
            "activation_130 (Activation)  (None, 198, 198, 64)      0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_44 (MaxPooling (None, 99, 99, 64)        0         \n",
            "_________________________________________________________________\n",
            "dropout_52 (Dropout)         (None, 99, 99, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_114 (Conv2D)          (None, 99, 99, 128)       73856     \n",
            "_________________________________________________________________\n",
            "activation_131 (Activation)  (None, 99, 99, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_115 (Conv2D)          (None, 97, 97, 128)       147584    \n",
            "_________________________________________________________________\n",
            "activation_132 (Activation)  (None, 97, 97, 128)       0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_45 (MaxPooling (None, 48, 48, 128)       0         \n",
            "_________________________________________________________________\n",
            "dropout_53 (Dropout)         (None, 48, 48, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_116 (Conv2D)          (None, 48, 48, 256)       295168    \n",
            "_________________________________________________________________\n",
            "activation_133 (Activation)  (None, 48, 48, 256)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_117 (Conv2D)          (None, 46, 46, 256)       590080    \n",
            "_________________________________________________________________\n",
            "activation_134 (Activation)  (None, 46, 46, 256)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_118 (Conv2D)          (None, 44, 44, 256)       590080    \n",
            "_________________________________________________________________\n",
            "activation_135 (Activation)  (None, 44, 44, 256)       0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_46 (MaxPooling (None, 22, 22, 256)       0         \n",
            "_________________________________________________________________\n",
            "dropout_54 (Dropout)         (None, 22, 22, 256)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_119 (Conv2D)          (None, 22, 22, 512)       1180160   \n",
            "_________________________________________________________________\n",
            "activation_136 (Activation)  (None, 22, 22, 512)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_120 (Conv2D)          (None, 20, 20, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "activation_137 (Activation)  (None, 20, 20, 512)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_121 (Conv2D)          (None, 18, 18, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "activation_138 (Activation)  (None, 18, 18, 512)       0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_47 (MaxPooling (None, 9, 9, 512)         0         \n",
            "_________________________________________________________________\n",
            "dropout_55 (Dropout)         (None, 9, 9, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_122 (Conv2D)          (None, 9, 9, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "activation_139 (Activation)  (None, 9, 9, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_123 (Conv2D)          (None, 7, 7, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "activation_140 (Activation)  (None, 7, 7, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_124 (Conv2D)          (None, 5, 5, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "activation_141 (Activation)  (None, 5, 5, 512)         0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_48 (MaxPooling (None, 2, 2, 512)         0         \n",
            "_________________________________________________________________\n",
            "dropout_56 (Dropout)         (None, 2, 2, 512)         0         \n",
            "_________________________________________________________________\n",
            "flatten_10 (Flatten)         (None, 2048)              0         \n",
            "_________________________________________________________________\n",
            "dense_28 (Dense)             (None, 4096)              8392704   \n",
            "_________________________________________________________________\n",
            "activation_142 (Activation)  (None, 4096)              0         \n",
            "_________________________________________________________________\n",
            "dense_29 (Dense)             (None, 4096)              16781312  \n",
            "_________________________________________________________________\n",
            "activation_143 (Activation)  (None, 4096)              0         \n",
            "_________________________________________________________________\n",
            "dropout_57 (Dropout)         (None, 4096)              0         \n",
            "_________________________________________________________________\n",
            "dense_30 (Dense)             (None, 5)                 20485     \n",
            "=================================================================\n",
            "Total params: 39,909,189\n",
            "Trainable params: 39,909,189\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G6aA8V0iowyh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T_o1K-iyjPO8",
        "colab_type": "code",
        "outputId": "138d20b4-a0d4-4169-f93f-433f6edb13f2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print(history.history.keys())\n",
        "# model.save('air_model_6434.h5')\n",
        "model.save('air_model_4585.h5')"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_keys(['val_loss', 'val_acc', 'loss', 'acc'])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0rE6CnYgjQLZ",
        "colab_type": "code",
        "outputId": "45e0b259-78db-4c95-ef99-ef00a1e1bfee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(history.history['acc'])\n",
        "plt.plot(history.history['val_acc'])\n",
        "plt.title('validation Accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epochs')\n",
        "plt.legend(['val_acc','acc'],loc='upper left')\n",
        "plt.show()\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('Training Loss')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epochs')\n",
        "plt.legend(['val_loss','loss'],loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\niIjGLy9fqm8oh9XIAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UDUT_CfOCap8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 340
        },
        "outputId": "cca37bea-014e-467f-f8c2-5db38fce210a"
      },
      "source": [
        "air_model = load_model('air_model_4585.h5')\n",
        "air_model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=[\"accuracy\"])\n",
        "import os\n",
        "import glob\n",
        "path_img = 'test/0/'\n",
        "imagefiles = glob.glob(path_img + '*.jpg')\n",
        "preds = np.ndarray(shape=(len(imagefiles),1))\n",
        "\n",
        "i=0\n",
        "for imagePath in imagefiles:\n",
        "  test_image = image.load_img(imagePath, target_size = (200, 200)) \n",
        "  test_image = image.img_to_array(test_image)\n",
        "  test_image = np.expand_dims(test_image, axis = 0)\n",
        "\n",
        "  #predict the result\n",
        "  result = air_model.predict(test_image)\n",
        "  preds[i] = np.argmax(result, axis=1)\n",
        "  \n",
        "  i=i+1\n",
        "labels = []\n",
        "for i in preds:\n",
        "  if i == 0:\n",
        "    labels.append('cbb')\n",
        "  elif i == 1:\n",
        "    labels.append('cbsd')\n",
        "  elif i == 2:\n",
        "    labels.append('cgm')\n",
        "  elif i == 3:\n",
        "    labels.append('cmd')\n",
        "  elif i == 4:\n",
        "    labels.append('healthy')\n",
        "\n",
        "names =[]\n",
        "for i in imagefiles:\n",
        "  i= i[7:]\n",
        "  names.append(i)"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-97-f9117c3d95b3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mair_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'air_model_4585.h5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mair_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'categorical_crossentropy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msgd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"accuracy\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mglob\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mpath_img\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'test/0/'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mcompile\u001b[0;34m(self, optimizer, loss, metrics, loss_weights, sample_weight_mode, weighted_metrics, target_tensors, **kwargs)\u001b[0m\n\u001b[1;32m     94\u001b[0m                 \u001b[0;31m`\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0;32mor\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0msample_weight_mode\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m         \"\"\"\n\u001b[0;32m---> 96\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptimizers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmetrics\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/optimizers.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(identifier)\u001b[0m\n\u001b[1;32m    799\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    800\u001b[0m         raise ValueError('Could not interpret optimizer identifier: ' +\n\u001b[0;32m--> 801\u001b[0;31m                          str(identifier))\n\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m: Could not interpret optimizer identifier: <class 'keras.optimizers.SGD'>"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DIWzsfY9Lfqx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df.to_csv('submission_45.csv', index=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xl4_p4u0PD_r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}
